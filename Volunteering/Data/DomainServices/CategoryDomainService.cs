using AutoMapper;
using Microsoft.EntityFrameworkCore;
using System.Diagnostics.Metrics;
using Volunteering.Data.Models;
using Volunteering.Data.ViewModels;

namespace Volunteering.Data.DomainServices
{
    public class CategoryDomainService
    {
        private AppDbContext _context;
        private readonly IMapper _mapper;
        public CategoryDomainService(AppDbContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public CategoryVM ModelToVm(Category vm) => _mapper.Map<CategoryVM>(vm);

        public List<CategoryVM> ModelToVm(IEnumerable<Category> newsList) => _mapper.Map<List<CategoryVM>>(newsList);

        public Category VmToModel(CategoryVM vm) => _mapper.Map<Category>(vm);

        public Category AddCategoryWithSubcategories(CategoryVM model)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    // Create new Category
                    var category = new Category { CategoryName = model.CategoryName };
                    _context.Categories.Add(category);
                    _context.SaveChanges(); // Save early to retrieve CategoryId if it's generated by the database

                    foreach (var subcategoryName in model.Subcategories)
                    {
                        // Check if the Subcategory already exists in the context of this category
                        var subcategory = _context.CategorySubcategories
                            .Include(cs => cs.Subcategory)
                            .Where(cs => cs.CategoryId == category.CategoryId)
                            .Select(cs => cs.Subcategory)
                            .FirstOrDefault(sc => sc.SubcategoryName == subcategoryName);

                        // If it doesn't exist, create a new Subcategory
                        if (subcategory == null)
                        {
                            subcategory = new Subcategory { SubcategoryName = subcategoryName };
                            _context.Subcategories.Add(subcategory);
                            _context.SaveChanges(); // Save to ensure SubcategoryId is generated if needed
                        }

                        // Create the relationship between Category and Subcategory
                        var categorySubcategory = new CategorySubcategory
                        {
                            CategoryId = category.CategoryId,
                            SubcategoryId = subcategory.SubcategoryId
                        };
                        _context.CategorySubcategories.Add(categorySubcategory);
                    }

                    _context.SaveChanges();
                    transaction.Commit();
                    return category;
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    throw new InvalidOperationException("Error creating category and subcategories", ex);
                }
            }
        }

        public bool Delete(CategoryVM obj)
        {
            var tmp = _context.Categories.FirstOrDefault(x => x.CategoryName == obj.CategoryName);
            if (tmp != null)
            {
                _context.Categories.Remove(tmp);
                _context.SaveChanges();
                return true;
            }
            return false;
        }

        public Category? Get(Guid id)
        {
            return _context.Categories.Find(id);
        }

        public IEnumerable<Category> GetAll()
        {
            return _context.Categories
                .Include(x => x.CategorySubcategories).ThenInclude(y => y.Subcategory)
                .ToList();
        }

        public Category Update(CategoryVM obj)
        {
            Category? res = _context.Categories.FirstOrDefault(x => x.CategoryName == obj.CategoryName);
            _mapper.Map(obj, res);
            _context.SaveChanges();
            return res;
        }
    }
}
